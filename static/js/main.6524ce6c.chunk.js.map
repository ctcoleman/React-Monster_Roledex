{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbar/searchbar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","username","email","CardList","monsters","map","Searchbar","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAEaA,EAAO,SAAAC,GAClB,OACC,sBAAKC,UAAU,iBAAf,UACG,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,4BAChF,6BAAML,EAAMG,QAAQG,OACpB,6BAAMN,EAAMG,QAAQI,WACpB,4BAAKP,EAAMG,QAAQK,YCJZC,G,MAAW,SAAAT,GACtB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMU,SAASC,KAAI,SAAAR,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNdQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCCG,G,wDAlCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZxD,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAK7C,WAAU,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAAIA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6524ce6c.chunk.js","sourcesContent":["import './card.styles.css'\n\nexport const Card = props => {\n  return (\n   <div className='card-container'>\n      <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster default profile\"/>\n      <h2>{ props.monster.name }</h2>\n      <h3>{ props.monster.username }</h3>\n      <p>{ props.monster.email }</p>\n    </div>\n  )\n}","import { Card } from '../card/card.component'\n\nimport './card-list.styles.css'\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(monster => \n        <Card key={monster.id} monster={monster} />\n      )}\n    </div>\n  )\n}","import './searchbar.style.css'\n\nexport const Searchbar = ({ placeholder, handleChange }) =>\n  <input\n    className='search'\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />","import { Component } from 'react'\n\nimport { CardList } from './components/card-list/card-list.component'\nimport { Searchbar } from './components/searchbar/searchbar.component'\n\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = { \n      monsters: [], \n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  handleChange = e => this.setState({ searchField: e.target.value })\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Roledex</h1>\n        <Searchbar \n          placeholder=\"Search Monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n    </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}